Environment

  VisualStudio
    1.- Download Microsoft Visual Studio 2022 version 17.0 or later for Windows from the following link:
      https://visualstudio.microsoft.com/downloads/.

    2.- Start the installer.

    3.- On the Workloads tab, select the following:
      ASP.NET and web development
      Azure development
      .NET desktop development
      Desktop development with C++
      Universal Windows Platform development
      Mobile development with .NET

    4.- On the Individual components tab, in the Code tools section, select the following:
      Class Designer
      Git for Windows
      PreEmptive Protection - Dotfuscator

    5.- Click Install and wait for the installer to acquire the selected software and install it.
    6.- When the installation is complete, click Launch.
    7.- The first time that you run Visual Studio, you will be prompted to sign in. If you have a Microsoft account, you can use that account. If you don't, then register for a new one at the following link: https://signup.live.com/.
    8.- The first time that you run Visual Studio, you will be prompted to configure your environment. For Development Settings, choose Visual C#. For the color theme, I chose Blue, but you can choose whatever tickles your fancy.
    9.- If you want to customize your keyboard shortcuts, navigate to Tools | Options…, and then select the Keyboard section.

  VSCode
    1.- Download and install either the Stable build or the Insiders edition of Visual Studio Code from the following link:
      https://code.visualstudio.com/.

      More Information: If you need more help installing Visual Studio Code, you can read the official setup guide at the following link:
      https://code.visualstudio.com/docs/setup/setup-overview.

    2.- Download and install the .NET SDKs for versions 3.1, 5.0, and 6.0 from the following link:
      https://www.microsoft.com/net/download.

      To fully learn how to control .NET SDKs, we need multiple versions installed. .NET Core 3.1, .NET 5.0, and .NET 6.0 are the three currently supported versions. You can safely install multiple ones side by side. You will learn how to target the one you want throughout this book.

    3.- To install the C# extension, you must first launch the Visual Studio Code application.
    4.- In Visual Studio Code, click the Extensions icon or navigate to View | Extensions.
    5.- C# is one of the most popular extensions available, so you should see it at the top of the list, or you can enter C# in the search box.
    6.- Click Install and wait for supporting packages to download and install.
    7.- Enter .NET Interactive in the search box to find the .NET Interactive Notebooks extension.
    8.- Click Install and wait for it to install.

  Removing old versions of .NET
    dotnet --list-sdks
    dotnet --list-runtimes

    dotnet-core-uninstall remove --all-previews-but-latest --sdk 

  Extensions
    C# for Visual Studio Code (powered by OmniSharp)
    ms-dotnettools.csharp
      C# editing support, including syntax highlighting, IntelliSense, Go to Definition, Find All References, debugging support for .NET, and support for csproj projects on Windows, macOS, and Linux.

    .NET Interactive Notebooks
      ms-dotnettools.dotnet-interactive-vscode
        This extension adds support for using .NET Interactive in a Visual Studio Code notebook. It has a dependency on the Jupyter extension (ms-toolsai.jupyter).

    MSBuild project tools
    tinytoy.msbuild-project-tools
      Provides IntelliSense for MSBuild project files, including autocomplete for <PackageReference> elements.

    REST Client
    humao.rest-client
      Send an HTTP request and view the response directly in Visual Studio Code.

    ILSpy .NET Decompiler
    icsharpcode.ilspy-vscode
      Decompile MSIL assemblies – support for modern .NET, .NET Framework, .NET Core, and .NET Standard.

    Azure Functions for Visual Studio Code
    ms-azuretools.vscode-azurefunctions
      Create, debug, manage, and deploy serverless apps directly from VS Code. It has dependencies on Azure Account (ms-vscode.azure-account) and Azure Resources (ms-azuretools.vscode-azureresourcegroups) extensions.

    GitHub Repositories
    github.remotehub
      Browse, search, edit, and commit to any remote GitHub repository directly from within Visual Studio Code.

    SQL Server (mssql) for Visual Studio Code
    ms-mssql.mssql
      For developing Microsoft SQL Server, Azure SQL Database, and SQL Data Warehouse everywhere with a rich set of functionalities.

    Protobuf 3 support for Visual Studio Code
    zxh404.vscode-proto3
      Syntax highlighting, syntax validation, code snippets, code completion, code formatting, brace matching, and line and block commenting.

Debugging
  https://github.com/OmniSharp/omnisharp-vscode/blob/master/debugger.md


Logging
    The Debug class is used to add logging that gets written only during development.
    The Trace class is used to add logging that gets written during both development and runtime.

Testing

  Unit
	  Tests the smallest unit of code, typically a method or function. Unit testing is performed on a unit of code isolated from its dependencies by mocking them if needed. Each unit should have multiple tests: some with typical inputs and expected outputs, some with extreme input values to test boundaries, and some with deliberately wrong inputs to test exception handling.

  Integration
    Tests if the smaller units and larger components work together as a single piece of software. Sometimes involves integrating with external components that you do not have source code for.

  System
	  Tests the whole system environment in which your software will run.

  Performance
	  Tests the performance of your software; for example, your code must return a web page full of data to a visitor in under 20 milliseconds.

  Load
    Tests how many requests your software can handle simultaneously while maintaining required performance, for example, 10,000 concurrent visitors to a website.

  User Acceptance
    Tests if users can happily complete their work using your software.


Tracing
  0   Off       This will output nothing.
  1   Error     This will output only errors.
  2   Warning   This will output errors and warnings.
  3   Info      This will output errors, warnings, and information.
  4   Verbose   This will output all levels.

GitHub
  https://github.com/markjprice/cs9dotnet5-extras/blob/main/raspberry-pi-ubuntu64/README.md
  https://github.com/markjprice/cs10dotnet6
  https://github.com/markjprice/cs10dotnet6.git
  https://github.com/markjprice/cs10dotnet6/blob/main/docs/code-editors
  https://github.com/markjprice/cs10dotnet6/blob/main/book-links.md#chapter-2---speaking-c0
  https://github.com/markjprice/cs10dotnet6/blob/main/book-links.md#chapter-3---controlling-flow-and-converting-types
  https://github.com/markjprice/cs10dotnet6/blob/main/book-links.md#chapter-4---writing-debugging-and-testing-functions
  https://github.com/markjprice/cs10dotnet6/blob/main/book-links.md#chapter-5---building-your-own-types-with-object-oriented-programming
  https://github.com/markjprice/cs10dotnet6/blob/main/book-links.md#chapter-6---implementing-interfaces-and-inheriting-classes
  https://github.com/markjprice/cs10dotnet6/blob/main/book-links.md#chapter-7---understanding-and-packaging-net-types
  https://github.com/markjprice/cs10dotnet6/blob/main/book-links.md#chapter-8---working-with-common-net-types
  https://github.com/markjprice/cs10dotnet6/blob/main/vs4win/Chapter07/SharedLibrary/packt-csdotnet-sharedlibrary.png
  https://github.com/markjprice/cs10dotnet6/blob/main/9781801077361_Bonus_Content.pdf
  https://github.com/markjprice/cs10dotnet6/tree/main/docs/powershell
  https://github.com/markjprice/cs10dotnet6/tree/main/notebooks
  https://github.com/markjprice/cs10dotnet6/tree/main/vscode
  https://github.com/markjprice/cs10dotnet6/tree/main/vs4win
  https://github.com/markjprice/cs10dotnet6/tree/master/Assets/Categories
  https://github.com/markjprice/cs10dotnet6/issues

Links
  GitHub
    https://github.com/FritzAndFriends/BlazorWebFormsComponents

  Microsoft
    https://aka.ms/dotnet/sdk-not-found
    https://aka.ms/dotnet-core-download
    https://aka.ms/netsdk1083
    https://aka.ms/new-console-template
    https://aka.ms/dotnet-core-support
    https://devblogs.microsoft.com/dotnet/performance-improvements-in-net-5/
    https://devblogs.microsoft.com/dotnet/preview-features-in-net-6-generic-math
    https://devblogs.microsoft.com/dotnet/supporting-the-community-with-wf-and-wcf-oss-projects/
    https://docs.microsoft.com/en-us/dotnet/api/system.collections.concurrent
    https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.assemblybuilder
    https://docs.microsoft.com/en-us/dotnet/api/system.reflection.methodbase.invoke
    https://docs.microsoft.com/en-us/dotnet/core/porting/upgrade-assistant-overview
    https://docs.microsoft.com/en-us/dotnet/standard/assembly/unloadability
    https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-date-and-time-format-strings#table-of-format-specifiers
    https://docs.microsoft.com/en-us/dotnet/standard/library-guidance/cross-platform-targeting#multi-targeting
    https://docs.microsoft.com/en-us/nuget/hosting-packages/overview
    https://docs.microsoft.com/en-us/nuget/reference/msbuild-targets
    https://dotnet.microsoft.com/download/dotnet/3.1
    https://dotnet.microsoft.com/download/visual-studio-sdks
    https://www.nuget.org/
    https://www.nuget.org/packages/DialectSoftware.Collections.Matrix/
    https://www.nuget.org/packages/manage/upload
    https://www.nuget.org/packages/System.IO.FileSystem/




  PacktPub
      https://static.packt-cdn.com/downloads/9781801077361_Bonus_Content.pdf

  StackOverflow
    https://stackoverflow.com/questions/18144431/regex-to-split-a-csv
    https://stackoverflow.com/questions/9/how-do-i-calculate-someones-age-in-c

  Others
    https://channel9.msdn.com/Blogs/Seth-Juarez/A-Brief-Look-at-the-NET-Portability-Analyzer
    https://www.mono-project.com/download/stable/
    https://nuget.info
    https://semver.org
    https://spdx.org/licenses/
    https://themesof.net/
    https://en.wikipedia.org/wiki/Names_of_large_numbers

  

Standards
  C# language design
    https://github.com/dotnet/csharplang

  Compiler implementation
    https://github.com/dotnet/roslyn

  Standard to describe the language
    https://github.com/dotnet/csharpstandard

